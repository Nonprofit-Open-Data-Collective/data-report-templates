{
v <-
tagList(
div( class="parent",
div( class="div1", h4( vname ) ),
div( class="div2", p( vlabel )  ),
div( class="div3", withTags(
table(
tr(
td( "DATA TYPE"  ),
td( vtype  )
),
tr(
td( "SCOPE"  ),
td( vscope  )
)
)
) ),
div( class="div4", p( paste0( "DESCRIPTION: ", vdesc ) )  ),
div( class="div5", p( paste0( "LOCATION CODE: ", lcode ) )  )
),
withTags(  HTML("<br><hr><br>"), p('\n')  )
)
return(v)
}
containerize_v( vname, vlabel, vtype, vscope, vdesc, lcode )
containerize_v <- function( vname, vlabel, vtype, vscope, vdesc, lcode )
{
v <-
tagList(
div( class="parent",
div( class="div2", p( vlabel )  ),
div( class="div3", withTags(
table(
tr(
td( "DATA TYPE"  ),
td( vtype  )
),
tr(
td( "SCOPE"  ),
td( vscope  )
)
)
) ),
div( class="div4", p( paste0( "DESCRIPTION: ", vdesc ) )  ),
div( class="div5", p( paste0( "LOCATION CODE: ", lcode ) )  )
),
withTags(  HTML("<br><hr><br>"), p('\n')  )
)
return(v)
}
containerize_v( vname, vlabel, vtype, vscope, vdesc, lcode )
#| output: asis
v.layout
containerize_v <- function( vname, vlabel, vtype, vscope, vdesc, lcode )
{
v <-
tagList(
div( class="parent",
div( class="div1", h4( vname ) ),
div( class="div2", p( vlabel ) ),
div( class="div3", withTags(
table(
tr(
td( "DATA TYPE"  ),
td( vtype  )
),
tr(
td( "SCOPE"  ),
td( vscope  )
)
)
) ),
div( class="div4", p( paste0( "DESCRIPTION: ", vdesc ) ) ),
div( class="div5", p( paste0( "LOCATION CODE: ", lcode ) ) )
),
withTags(  HTML("<br><hr><br>"), p('\n')  )
)
return(v)
}
containerize_v <- function( vname, vlabel, vtype, vscope, vdesc, lcode )
{
v <-
tagList(
div( class="parent",
div( class="div1", h4( vname ) ),
div( class="div2", p( vlabel ) ),
div( class="div3", withTags(
table(
tr(
td( "DATA TYPE"  ),
td( vtype  )
),
tr(
td( "SCOPE"  ),
td( vscope  )
)
)
) ),
div( class="div4", p( paste0( "DESCRIPTION: ", vdesc ) ) ),
div( class="div5", p( paste0( "LOCATION CODE: ", lcode ) ) )
),
withTags(  HTML("<br><hr><br>"), p('\n')  )
)
return(v)
}
containerize_v( vname, vlabel, vtype, vscope, vdesc, lcode )
containerize_v <- function( vname, vlabel, vtype, vscope, vdesc, lcode )
{
v <-
tagList(
div( class="parent",
div( class="div1", p( paste0( vname, ".........." )) ),
div( class="div2", p( vlabel ) ),
div( class="div3", withTags(
table(
tr(
td( "DATA TYPE"  ),
td( vtype  )
),
tr(
td( "SCOPE"  ),
td( vscope  )
)
)
) ),
div( class="div4", p( paste0( "DESCRIPTION: ", vdesc ) ) ),
div( class="div5", p( paste0( "LOCATION CODE: ", lcode ) ) )
),
withTags(  HTML("<br><hr><br>"), p('\n')  )
)
return(v)
}
<span style="color:dark orange"> "LOCATION CODE"</span>
containerize_v <- function( vname, vlabel, vtype, vscope, vdesc, lcode )
{
v <-
tagList(
div( class="parent",
div( class="div1", p( paste0( vname, ".........." )) ),
div( class="div2", p( vlabel ) ),
div( class="div3", withTags(
table(
tr(
td( "DATA TYPE"  ),
td( vtype  )
),
tr(
td( "SCOPE"  ),
td( vscope  )
)
)
) ),
div( class="div4", p( paste0( "DESCRIPTION: ", vdesc ) ) ),
div( class="div5", p( paste0( "LOCATION CODE: ", lcode ) ) )
),
withTags(  HTML("<br><hr><br>"), p('\n')  )
)
return(v)
}
containerize_v <- function( vname, vlabel, vtype, vscope, vdesc, lcode )
{
v <-
tagList(
div( class="parent",
div( class="div1", p( paste0( vname, ".........." )) ),
div( class="div2", p( vlabel ) ),
div( class="div3", withTags(
table(
tr(
td( "DATA TYPE" ),
td( vtype  )
),
tr(
td( "SCOPE"  ),
td( vscope  )
)
)
) ),
div( class="div4", p( paste0( "DESCRIPTION: ", vdesc ) ) ),
div( class="div5", withTags(
table(
tr(
td1( "LOCATION CODE: " ),
td2( lcode )
)
)
) ) ),
withTags(  HTML("<br><hr><br>"), p('\n')  )
)
return(v)
}
containerize_v <- function( vname, vlabel, vtype, vscope, vdesc, lcode )
{
v <-
tagList(
div( class="parent",
div( class="div1", p( paste0( vname, ".........." )) ),
div( class="div2", p( vlabel ) ),
div( class="div3", withTags(
table(
tr(
td( "DATA TYPE" ),
td( vtype  )
),
tr(
td( "SCOPE"  ),
td( vscope  )
)
)
) ),
div( class="div4", p( paste0( "DESCRIPTION: ", vdesc ) ) ),
div( class="div5", withTags(
table(
tr(
td( class="div6", "LOCATION CODE: " ),
td( lcode )
)
)
) ) ),
withTags(  HTML("<br><hr><br>"), p('\n')  )
)
return(v)
}
containerize_v <- function( vname, vlabel, vtype, vscope, vdesc, lcode )
{
v <-
tagList(
div( class="parent",
div( class="div1", p( paste0( vname, ".........." )) ),
div( class="div2", p( vlabel ) ),
div( class="div3", withTags(
table(
tr(
td( "DATA TYPE" ),
td( vtype  )
),
tr(
td( "SCOPE"  ),
td( vscope  )
)
)
) ),
div( class="div4", p( paste0( "DESCRIPTION: ", vdesc ) ) ),
div( class="div5", withTags(
table(
tr(
td( class="div6", p( "LOCATION CODE: " ) ),
td( lcode )
)
)
) ) ),
withTags(  HTML("<br><hr><br>"), p('\n')  )
)
return(v)
}
library( htmltools )
library( dplyr )
containerize_v <- function( vname, vlabel, vtype, vscope, vdesc, lcode )
{
v <-
tagList(
div( class="parent",
div( class="div1", p( paste0( vname, ".........." )) ),
div( class="div2", p( vlabel ) ),
div( class="div3", withTags(
table(
tr(
td( "DATA TYPE" ),
td( vtype  )
),
tr(
td( "SCOPE"  ),
td( vscope  )
)
)
) ),
div( class="div4", p( paste0( "DESCRIPTION: ", vdesc ) ) ),
div( class="div5", withTags(
table(
tr(
td( class="div6", p( "LOCATION CODE: " ) ),
td( p( lcode ) )
)
)
) ) ),
withTags(  HTML("<br><hr><br>"), p('\n')  )
)
return(v)
}
dat <- read.csv( "concordance-v98.csv" )
names( dat ) <- toupper( names( dat ) )
# remove special characters that will
# wreck table formatting like ($)
dat$DESCRIPTION <- gsub( "\\(\\$\\)[ ]{0,1}", "", dat$DESCRIPTION )
dat$LABEL <- gsub( "\\(\\$\\)[ ]{0,1}", "", dat$LABEL )
# use location codes if family code is missing
dat$LOCATION_CODE_FAMILY[ is.na(dat$LOCATION_CODE_FAMILY) ] <-
dat$LOCATION_CODE[ is.na(dat$LOCATION_CODE_FAMILY) ]
# select the table you want
d <- dat[RDB_TABLE=="F9-P00-T00-HEADER"]
dat <- read.csv( "concordance-v98.csv" )
names( dat ) <- toupper( names( dat ) )
# remove special characters that will
# wreck table formatting like ($)
dat$DESCRIPTION <- gsub( "\\(\\$\\)[ ]{0,1}", "", dat$DESCRIPTION )
dat$LABEL <- gsub( "\\(\\$\\)[ ]{0,1}", "", dat$LABEL )
# use location codes if family code is missing
dat$LOCATION_CODE_FAMILY[ is.na(dat$LOCATION_CODE_FAMILY) ] <-
dat$LOCATION_CODE[ is.na(dat$LOCATION_CODE_FAMILY) ]
# select the table you want
d <- dat[dat$RDB_TABLE=="F9-P00-T00-HEADER"]
dat <- read.csv( "concordance-v98.csv" )
names( dat ) <- toupper( names( dat ) )
# remove special characters that will
# wreck table formatting like ($)
dat$DESCRIPTION <- gsub( "\\(\\$\\)[ ]{0,1}", "", dat$DESCRIPTION )
dat$LABEL <- gsub( "\\(\\$\\)[ ]{0,1}", "", dat$LABEL )
# use location codes if family code is missing
dat$LOCATION_CODE_FAMILY[ is.na(dat$LOCATION_CODE_FAMILY) ] <-
dat$LOCATION_CODE[ is.na(dat$LOCATION_CODE_FAMILY) ]
# select the table you want
d <- dat[RDB_TABLE=="F9-P00-T00-HEADER"]
dat <- read.csv( "concordance-v98.csv" )
names( dat ) <- toupper( names( dat ) )
# remove special characters that will
# wreck table formatting like ($)
dat$DESCRIPTION <- gsub( "\\(\\$\\)[ ]{0,1}", "", dat$DESCRIPTION )
dat$LABEL <- gsub( "\\(\\$\\)[ ]{0,1}", "", dat$LABEL )
# use location codes if family code is missing
dat$LOCATION_CODE_FAMILY[ is.na(dat$LOCATION_CODE_FAMILY) ] <-
dat$LOCATION_CODE[ is.na(dat$LOCATION_CODE_FAMILY) ]
# select the table you want
d <- dat[RDB_TABLE="F9-P00-T00-HEADER"]
dat <- read.csv( "concordance-v98.csv" )
names( dat ) <- toupper( names( dat ) )
# remove special characters that will
# wreck table formatting like ($)
dat$DESCRIPTION <- gsub( "\\(\\$\\)[ ]{0,1}", "", dat$DESCRIPTION )
dat$LABEL <- gsub( "\\(\\$\\)[ ]{0,1}", "", dat$LABEL )
# use location codes if family code is missing
dat$LOCATION_CODE_FAMILY[ is.na(dat$LOCATION_CODE_FAMILY) ] <-
dat$LOCATION_CODE[ is.na(dat$LOCATION_CODE_FAMILY) ]
# select the table you want
d <- dat[dat$RDB_TABLE='F9-P00-T00-HEADER']
dat <- read.csv( "concordance-v98.csv" )
names( dat ) <- toupper( names( dat ) )
# remove special characters that will
# wreck table formatting like ($)
dat$DESCRIPTION <- gsub( "\\(\\$\\)[ ]{0,1}", "", dat$DESCRIPTION )
dat$LABEL <- gsub( "\\(\\$\\)[ ]{0,1}", "", dat$LABEL )
# use location codes if family code is missing
dat$LOCATION_CODE_FAMILY[ is.na(dat$LOCATION_CODE_FAMILY) ] <-
dat$LOCATION_CODE[ is.na(dat$LOCATION_CODE_FAMILY) ]
# select the table you want
d <- dat[dat$RDB_TABLE=='F9-P00-T00-HEADER']
dat$RDB_TABLE
dat <- read.csv( "concordance-v98.csv" )
names( dat ) <- toupper( names( dat ) )
# remove special characters that will
# wreck table formatting like ($)
dat$DESCRIPTION <- gsub( "\\(\\$\\)[ ]{0,1}", "", dat$DESCRIPTION )
dat$LABEL <- gsub( "\\(\\$\\)[ ]{0,1}", "", dat$LABEL )
# use location codes if family code is missing
dat$LOCATION_CODE_FAMILY[ is.na(dat$LOCATION_CODE_FAMILY) ] <-
dat$LOCATION_CODE[ is.na(dat$LOCATION_CODE_FAMILY) ]
# select the table you want
d <- dat %>% filter ( RDB_TABLE == "F9-P00-T00-HEADER" )
library( htmltools )
library( dplyr )
containerize_v <- function( vname, vlabel, vtype, vscope, vdesc, lcode )
{
v <-
tagList(
div( class="parent",
div( class="div1", p( paste0( vname, ".........." )) ),
div( class="div2", p( vlabel ) ),
div( class="div3", withTags(
table(
tr(
td( "DATA TYPE" ),
td( vtype  )
),
tr(
td( "SCOPE"  ),
td( vscope  )
)
)
) ),
div( class="div4", p( paste0( "DESCRIPTION: ", vdesc ) ) ),
div( class="div5", withTags(
table(
tr(
td( class="div6", p( "LOCATION CODE: " ) ),
td( p( lcode ) )
)
)
) ) ),
withTags(  HTML("<br><hr><br>"), p('\n')  )
)
return(v)
}
dat <- read.csv( "concordance-v98.csv" )
names( dat ) <- toupper( names( dat ) )
# remove special characters that will
# wreck table formatting like ($)
dat$DESCRIPTION <- gsub( "\\(\\$\\)[ ]{0,1}", "", dat$DESCRIPTION )
dat$LABEL <- gsub( "\\(\\$\\)[ ]{0,1}", "", dat$LABEL )
# use location codes if family code is missing
dat$LOCATION_CODE_FAMILY[ is.na(dat$LOCATION_CODE_FAMILY) ] <-
dat$LOCATION_CODE[ is.na(dat$LOCATION_CODE_FAMILY) ]
# select the table you want
d <- dat %>% filter ( RDB_TABLE == "F9-P00-T00-HEADER" )
#| output: asis
rlist <- list()
for( i in nrow(d) )
{
vname   <- d$VARIABLE_NAME[i]
vlabel  <- d$LABEL[i]
vtype   <- d$DATA_TYPE_SIMPLE[i]
vscope  <- d$VARIABLE_SCOPE[i]
vdesc   <- d$DESCRIPTION[i]
lcode   <- d$LOCATION_CODE_FAMILY[i]
var.info <-
containerize_v( vname=vname,
vlabel=vlabel,
vtype=vtype,
vscope=vscope,
vdesc=vdesc,
lcode=lcode)
rlist[[i]] <- var.info
}
renderTags( rlist )$html
#| output: asis
rlist <- list()
withTags( class="div6", p(d$RDB_TABLE))
#| output: asis
rlist <- list()
div( withTags( class="div6", p(d$RDB_TABLE)))
#| output: asis
rlist <- list()
withTags(
div( class = "div6",
h1(d$RDB_TABLE)
)
)
dat <- read.csv( "concordance-v98.csv" )
names( dat ) <- toupper( names( dat ) )
# remove special characters that will
# wreck table formatting like ($)
dat$DESCRIPTION <- gsub( "\\(\\$\\)[ ]{0,1}", "", dat$DESCRIPTION )
dat$LABEL <- gsub( "\\(\\$\\)[ ]{0,1}", "", dat$LABEL )
# use location codes if family code is missing
dat$LOCATION_CODE_FAMILY[ is.na(dat$LOCATION_CODE_FAMILY) ] <-
dat$LOCATION_CODE[ is.na(dat$LOCATION_CODE_FAMILY) ]
# select the table you want
tbl <- "F9-P00-T00-HEADER"
d <- dat %>% filter ( RDB_TABLE == tbl )
#| output: asis
rlist <- list()
withTags(
div( class = "div6",
h1(tbl)
)
)
for( i in nrow(d) )
{
vname   <- d$VARIABLE_NAME[i]
vlabel  <- d$LABEL[i]
vtype   <- d$DATA_TYPE_SIMPLE[i]
vscope  <- d$VARIABLE_SCOPE[i]
vdesc   <- d$DESCRIPTION[i]
lcode   <- d$LOCATION_CODE_FAMILY[i]
var.info <-
containerize_v( vname=vname,
vlabel=vlabel,
vtype=vtype,
vscope=vscope,
vdesc=vdesc,
lcode=lcode)
rlist[[i]] <- var.info
}
renderTags( rlist )$html
#| output: asis
rlist <- list()
withTags(
div( class = "div7",
h1(tbl)
)
)
for( i in nrow(d) )
{
vname   <- d$VARIABLE_NAME[i]
vlabel  <- d$LABEL[i]
vtype   <- d$DATA_TYPE_SIMPLE[i]
vscope  <- d$VARIABLE_SCOPE[i]
vdesc   <- d$DESCRIPTION[i]
lcode   <- d$LOCATION_CODE_FAMILY[i]
var.info <-
containerize_v( vname=vname,
vlabel=vlabel,
vtype=vtype,
vscope=vscope,
vdesc=vdesc,
lcode=lcode)
rlist[[i]] <- var.info
}
renderTags( rlist )$html
nrow(d)
LABEL[3]
d$LABEL[3]
rlist
